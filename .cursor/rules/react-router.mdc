---
description:
globs: web/app/routes/**/*.tsx
alwaysApply: false
---
- The primary export in a routes file should specify `loaderData` like `export default function RouteNamePage({ loaderData }: Route.ComponentProps)`. `loaderData` is the return value from `clientLoader`.
- When using an import from `~/configuration/client` (1) use `body:` for request params and (2) always `const { data, error } = await theCall()` (3) add `invariant(data, "error loading $xyz")`
- Use `href("/products/:id", { id: "abc123" })` to generate a url path for a route managed by the application.
  - Look at [routes.ts](mdc:web/app/routes.ts) to determine what routes and path parameters exist.
- Use `export async function clientLoader(loaderArgs: Route.ClientLoaderArgs)` to define a clientLoader on a route.
  - Use `loaderArgs.params.$THE_KEY` to use a query string parameter.
- Do not define `Route.*` types, these are autogenerated and can be imported from `import type { Route } from "./+types/routeFileName"`
- Each non-layout route should define a meta function:

```typescript
export const meta: MetaFunction = () => {
  return [
    { title: "Page Title" },
    {
      name: "description",
      content: "Page Description",
    },
  ]
}
```

### Using API Data

* `~/configuration/client` re-exports all types and functions from `client/*`. Import from `~/configuration/client` instead of anything you find in the `client/` folder/package.
* For each API endpoint, there's a fully typed async function that can be used to call it. Never attempt to call an API endpoint directly.
